指针
题目 ：编写一个Go程序，定义一个函数，该函数接收一个整数指针作为参数，在函数内部将该指针指向的值增加10，然后在主函数中调用该函数并输出修改后的值。
func main() {
	test := 10
	add(&test)
	fmt.Println(test)
}

func add(num *int) {
	*num += 10
}

 
题目 ：实现一个函数，接收一个整数切片的指针，将切片中的每个元素乘以2。
func main() {

	intArraySlice := []int{1, 2, 3, 4, 5}
	arraySlice(&intArraySlice)
	fmt.Println(intArraySlice)
}

func arraySlice(arraySlice *[]int) {

	for i := range *arraySlice {
		(*arraySlice)[i] *= 2
	}
}


Goroutine
题目 ：编写一个程序，使用 go 关键字启动两个协程，一个协程打印从1到10的奇数，另一个协程打印从2到10的偶数。
  ○ 考察点 ： go 关键字的使用、协程的并发执行。
func main() {

	go func() {
		for i := 2; i < 11; i++ {
			if i%2 == 0 {
				fmt.Print("偶数:", i)
			}
		}
	}()

	go func() {
		for i := 1; i < 11; i++ {
			if i%2 == 1 {
				fmt.Print("奇数:", i)
			}
		}
	}()

	time.Sleep(time.Second)
}

题目 ：设计一个任务调度器，接收一组任务（可以用函数表示），并使用协程并发执行这些任务，同时统计每个任务的执行时间。
  ○ 考察点 ：协程原理、并发任务调度。

func main() {

	taskSlice := []Task{Task01, Task02, Task03}

	for i, task := range taskSlice {
		go func() {
			startTime := time.Now()
			task(i)
			// 计算执行时间
			executionTime := time.Since(startTime)
			fmt.Println("第", i, "个任务执行时间为:", executionTime)
		}()
	}
	time.Sleep(10 * time.Second)
}

type Task func(index int)

func Task01(index int) {
	fmt.Println("任务一执行", index)
	time.Sleep(1 * time.Second)
}

func Task02(index int) {
	fmt.Println("任务二执行", index)
	time.Sleep(2 * time.Second)
}
func Task03(index int) {
	fmt.Println("任务三执行", index)
	time.Sleep(3 * time.Second)
}
面向对象
定义一个 Shape 接口，包含 Area() 和 Perimeter() 两个方法。然后创建 Rectangle 和 Circle 结构体，实现 Shape 接口。在主函数中，创建这两个结构体的实例，并调用它们的 Area() 和 Perimeter() 方法。
● 考察点 ：接口的定义与实现、面向对象编程风格。
func main() {
	Rectangle := Rectangle{
		Long:  4,
		Width: 2,
	}

	Circle := Circle{
		Radius: 4.6,
		Pi:     math.Pi,
	}
	Rectangle.Area()
	Rectangle.Perimeter()
	Circle.Area()
	Circle.Perimeter()

}

type Shape interface {
	Area()
	Perimeter()
}

type Rectangle struct {
	Long  int
	Width int
}
type Circle struct {
	Radius float64
	Pi     float64
}

func (Rectangle *Rectangle) Area() {
	fmt.Println("矩形面积为:", Rectangle.Long*Rectangle.Width)
}

func (Rectangle *Rectangle) Perimeter() {
	fmt.Println("矩形周长为:", (Rectangle.Long+Rectangle.Width)*2)
}

func (Circle *Circle) Area() {
	fmt.Println("圆面积为:", Circle.Pi*Circle.Radius*Circle.Radius)
}

func (Circle *Circle) Perimeter() {
	fmt.Println("圆面周长为:", Circle.Pi*Circle.Radius*2)
}


使用组合的方式创建一个 Person 结构体，包含 Name 和 Age 字段，再创建一个 Employee 结构体，组合 Person 结构体并添加 EmployeeID 字段。为 Employee 结构体实现一个 PrintInfo() 方法，输出员工的信息。
考察点 ：组合的使用、方法接收者。
func main() {
	Employee := Employee{
		Person: Person{
			Name: "张三",
			Age:  30,
		},
		EmployeeID: 123456,
	}

	Employee.PrintInfo()
}

type Person struct {
	Name string
	Age  int
}

type Employee struct {
	Person     Person
	EmployeeID int
}

func (Employee *Employee) PrintInfo() {
	fmt.Println("员工姓名:", Employee.Person.Name)
	fmt.Println("员工年龄:", Employee.Person.Age)
	fmt.Println("员工ID:", Employee.EmployeeID)
}


Channel
编写一个程序，使用通道实现两个协程之间的通信。一个协程生成从1到10的整数，并将这些整数发送到通道中，另一个协程从通道中接收这些整数并打印出来。
● 考察点 ：通道的基本使用、协程间通信。
func main() {
	ch := make(chan int, 3)
	go SendOnly(ch)
	go ReadOnly(ch)
	time.Sleep(5 * time.Second)
}

func SendOnly(ch chan<- int) {
	for i := 1; i < 11; i++ {
		fmt.Println("管道写入信息:", i)
		ch <- i
	}
}

func ReadOnly(ch <-chan int) {
	for v := range ch {
		fmt.Println("管道读取信息:", v)
	}
}


实现一个带有缓冲的通道，生产者协程向通道中发送100个整数，消费者协程从通道中接收这些整数并打印。
● 考察点 ：通道的缓冲机制。
func main() {

	bufferedChan := make(chan int, 10)
	var wg sync.WaitGroup

	wg.Add(1)
	go func() {
		defer wg.Done()
		for i := 1; i <= 100; i++ {
			bufferedChan <- i

		}

		close(bufferedChan)
	}()

	wg.Add(1)
	go func(channel <-chan int) {
		defer wg.Done()

		for num := range channel {
			fmt.Printf("接收: %d\n", num)
		}
	}(bufferedChan)

	wg.Wait()
	fmt.Println("所有数据处理完毕")
}


锁机制
编写一个程序，使用 sync.Mutex 来保护一个共享的计数器。启动10个协程，每个协程对计数器进行1000次递增操作，最后输出计数器的值。
● 考察点 ： sync.Mutex 的使用、并发数据安全。


func main() {

	var wg sync.WaitGroup
	SafeCount := SafeCount{}
	wg.Add(10)
	for i := 0; i < 10; i++ {
		go func() {
			defer wg.Done()
			for j := 0; j < 1000; j++ {

				SafeCount.add()
			}
		}()
	}
	wg.Wait()
	fmt.Println("计数器的值:", SafeCount.count)
}

type SafeCount struct {
	mu    sync.Mutex
	count int
}

func (SafeCount *SafeCount) add() {
	SafeCount.mu.Lock()
	defer SafeCount.mu.Unlock()
	SafeCount.count++
}


使用原子操作（ sync/atomic 包）实现一个无锁的计数器。启动10个协程，每个协程对计数器进行1000次递增操作，最后输出计数器的值。
● 考察点 ：原子操作、并发数据安全。

func main() {

	var wg sync.WaitGroup
	var count uint64

	wg.Add(10)
	for i := 0; i < 10; i++ {
		go func() {
			defer wg.Done()
			for j := 0; j < 1000; j++ {
				atomic.AddUint64(&count, 1)
			}
		}()
	}
	wg.Wait()
	fmt.Println("计数器的值:", count)
}

























